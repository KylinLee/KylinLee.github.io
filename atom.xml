<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蝶恋花-等风也等你</title>
  
  <subtitle>等风也等你</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kylinlee.github.io/"/>
  <updated>2020-05-05T02:01:37.347Z</updated>
  <id>https://kylinlee.github.io/</id>
  
  <author>
    <name>Kylin Lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简单易懂讲闭包</title>
    <link href="https://kylinlee.github.io/2020/05/03/%E7%AE%80%E5%8D%95%E6%98%93%E6%87%82%E8%AE%B2%E9%97%AD%E5%8C%85/"/>
    <id>https://kylinlee.github.io/2020/05/03/%E7%AE%80%E5%8D%95%E6%98%93%E6%87%82%E8%AE%B2%E9%97%AD%E5%8C%85/</id>
    <published>2020-05-03T08:27:24.000Z</published>
    <updated>2020-05-05T02:01:37.347Z</updated>
    
    <content type="html"><![CDATA[<p>刚看到了 Rust 语言中利用闭包实现匿名函数，想着博客许久没更新了，那就写一篇帮助大家理解吧。闭包是 JavaScript 的一个特点，搜索引擎搜索<code>闭包</code>基本都会用 JavaScript 做例子，同时闭包也是 JavaScript 初学者较难理解的一个部分。</p><a id="more"></a><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="作用域规则"><a href="#作用域规则" class="headerlink" title="作用域规则"></a>作用域规则</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> variable = <span class="string">"variable"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readVar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> innerVariable = <span class="string">"innerVariable"</span>;</span><br><span class="line">  <span class="keyword">return</span> variable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(innerVariable); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>这段代码说明的是 JavaScript 的作用域链规则，<code>readVar</code>函数执行时没有在自身作用域内找到<code>variable</code>变量，于是向上层作用域寻找，并使用它。简单来说就是子作用域能使用父作用域的变量，而父作用域不能使用子作用域的变量。</p><h1 id="讲清楚什么是闭包"><a href="#讲清楚什么是闭包" class="headerlink" title="讲清楚什么是闭包"></a>讲清楚什么是闭包</h1><h2 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h2><p>闭包保存的是函数和函数运行的必要环境（使用到的变量等），它和<em>作用域</em>类似，但闭包只是包含一部分作用域，<strong>它是函数和函数使用的外部变量的集合</strong>。</p><h2 id="产生"><a href="#产生" class="headerlink" title="产生"></a>产生</h2><p>闭包在函数创建时就会产生，只要使用函数就存在闭包。</p><h2 id="利用闭包"><a href="#利用闭包" class="headerlink" title="利用闭包"></a>利用闭包</h2><p>按照上面所述，只要有函数就有闭包，但是我们在使用的时候感受不到闭包的存在。要怎么利用闭包呢？</p><p>这个例子已经被用烂了，但是用它来讲闭包也再合适不过了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countUp = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ++count;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 每调用一次返回一个比上一次大1的值</span></span><br><span class="line">countUp();</span><br></pre></td></tr></table></figure><p>第 4 行使用了一个父作用域的变量<code>count</code>，可以改变<code>count</code>的值，第 3 行将一个匿名函数返回到<code>countUp</code>外部，相当于创建了一个快照并保存到立即执行函数外部，里边包含了函数内部环境和该函数使用的外部变量<code>count</code>，这样通过闭包就能用<code>countUp</code>函数控制<code>count</code>值。你可以看到，利用闭包可以在函数外部控制函数内部的值。所以，利用闭包的<strong>核心</strong>是<strong>将函数和环境保存到外部变量</strong>。</p><p>我们都知道，当函数执行完毕，执行上下文离开作用域（这里指函数作用域），作用域会被立即销毁，按照常理来说代码不可能运行起来。但是因为返回了一个闭包，这之后闭包为<code>countUp</code>函数提供环境，这就是为什么上面的例子中立即执行函数执行完之后，通过<code>countUp</code>访问到的<code>count</code>是之前的状态。</p><p>所以，在使用闭包的时候你需要清楚的一点是，闭包会造成内存泄漏，如果你返回了一个函数作为闭包，只要返回的函数存在，这个闭包就一直存在，会占用内存。</p><h1 id="说点其他的"><a href="#说点其他的" class="headerlink" title="说点其他的"></a>说点其他的</h1><p>这里我们利用《Understanding ECMAScript 6》块级绑定中的一个例子</p><h2 id="典型错误"><a href="#典型错误" class="headerlink" title="典型错误"></a>典型错误</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funcs = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  funcs.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">funcs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">func</span>) </span>&#123;</span><br><span class="line">  func(); <span class="comment">// 输出 10 共10次</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在第 3 行，<code>console.log()</code>使用了变量<code>i</code>，它的闭包中除了本身，还应该保存有变量<code>i</code>，这个闭包被保存到了<code>funcs[i]</code>，但你要注意到，变量<code>i</code>是用<code>var</code>声明的，它在函数作用域中，<code>i</code>存在的作用域只有 window 一个，在循环中虽然产生了 10 个闭包，但他们都保存着同一个<code>i</code>，当循环执行完，<code>i = 10</code>，所以最后从闭包中取到的<code>i</code>也全都是 10。</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>上面提到了，因为变量<code>i</code>存在的作用域只有一个，而一个作用域中只能有一个<code>i</code>，要使<code>i</code>值不一样，就需要创建不同的作用域，解决方法有两个。</p><h3 id="方法一：使用块级作用域"><a href="#方法一：使用块级作用域" class="headerlink" title="方法一：使用块级作用域"></a>方法一：使用块级作用域</h3><p>只需要把<code>var</code>声明改为<code>let</code>声明即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funcs = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  funcs.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">funcs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">func</span>) </span>&#123;</span><br><span class="line">  func(); <span class="comment">// 输出 0，1，2 ... 9</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在 for 循环初始化的时候使用进行 let 声明,这时变量的作用域是局部块作用域，每进入一次循环都会重新创建一个<code>i</code>变量。所以每次循环产生的闭包中的<code>i</code>都来自不同的作用域，而且每个作用域中的<code>i</code>都是随循环变化的，最终达成目的输出 0~9。</p><p>这时候不妨回去检验一下（已经头晕请跳过）<br>我们将<code>i</code>变量和<code>funcs</code>变量放在同级作用域下，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funcs = [];</span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  funcs.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">funcs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">func</span>) </span>&#123;</span><br><span class="line">  func(); <span class="comment">// 输出 10 共10次</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我不是故意把你弄晕的，这样就能再次证明导致 bug 的根本原因是 10 个闭包使用同一个作用域的变量。</p><h3 id="方法二：创建函数作用域"><a href="#方法二：创建函数作用域" class="headerlink" title="方法二：创建函数作用域"></a>方法二：创建函数作用域</h3><p>这种方法的思路是创建函数内部的<code>i</code>变量，根据作用域链规则，当函数内部存在<code>i</code>变量时，就会屏蔽掉上层的<code>i</code>变量，通过函数返回闭包，这样闭包内的<code>i</code>变量就来自于函数，而不是函数上层的<code>i</code>变量。每个函数都会生成独一无二的作用域，根据上面的结论，同样能解决问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funcs = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  funcs.push(</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;)(i)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">funcs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">func</span>) </span>&#123;</span><br><span class="line">  func(); <span class="comment">// 输出 0，1，2 ... 9</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚看到了 Rust 语言中利用闭包实现匿名函数，想着博客许久没更新了，那就写一篇帮助大家理解吧。闭包是 JavaScript 的一个特点，搜索引擎搜索&lt;code&gt;闭包&lt;/code&gt;基本都会用 JavaScript 做例子，同时闭包也是 JavaScript 初学者较难理解的一个部分。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="https://kylinlee.github.io/categories/Code/"/>
    
    
      <category term="JavaScript" scheme="https://kylinlee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>重新审视个人博客</title>
    <link href="https://kylinlee.github.io/2020/04/25/%E9%87%8D%E6%96%B0%E5%AE%A1%E8%A7%86%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://kylinlee.github.io/2020/04/25/%E9%87%8D%E6%96%B0%E5%AE%A1%E8%A7%86%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-04-25T07:47:16.000Z</published>
    <updated>2020-05-04T10:21:12.932Z</updated>
    
    <content type="html"><![CDATA[<p>将博客迁移到 Hexo，让我在这个期间重新想想写博客这件事。</p><a id="more"></a><h1 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h1><p>还记得第一次写博客的时候根本没有想过为什么，这样做值不值得，总觉得别人有的，自己没有，感觉少了点什么。所以在 2019 年上半年开始了个人博客，最初是使用 Gridea，上手比较快，第一次提交的时间是 4 月 10 日，到现在已经一年了。<br><img src="https://i.loli.net/2020/04/25/LmPHXpQ4S5tVUof.png" alt="old-blog-repo.png"><br>既然有了，那就好好写下去吧，也没想过为什么。和 CSDN、博客园上的博客一样，起初是记录一些问题，一些学习总结。我也注意到博客的价值问题，我希望我的博客和别的博客不一样，做一些知识总结只是在网上增添重复的内容，我认为这样是没有太大意义的，我更注重原理的阐述，刚入前端的我不会太深入，但是还是坚持做原理的阐述。</p><h1 id="迁移到-Typecho"><a href="#迁移到-Typecho" class="headerlink" title="迁移到 Typecho"></a>迁移到 Typecho</h1><p>因为博客是通过 GitPage 搭建的，访问速度很慢，那时候正好弄了一台阿里云服务器，所以将博客全部迁移到了 Typecho，每一次迁移都代表着思想的转变，不只是因为访问加快速度，更因为作为一个程序员，也想打造一个自己的平台，希望有一天能形成个人品牌。除了在服务器上搭建博客，还搭建了自己的同步网盘，图床等应用。<br>因为奔着个人宣传去的，我的博客里边开始出现了更多生活的气息，甚至有了为博客加上类似于微博，QQ 空间的微型博文的想法。</p><h1 id="重新审视"><a href="#重新审视" class="headerlink" title="重新审视"></a>重新审视</h1><p>将博客迁移到 Hexo 的这段时间，我考虑了很多，对于现在的我，博客流量几乎都是自己创造的，那博客对于我的意义在于记录每天的成长，这些数据都是我的回忆。所以考虑到高额的维护成本，以及保留更原始的数据，我选择 Hexo，保持博客更新的热情。<br>选择 Github 这个平台更多是因为数据不会丢失。</p><h1 id="我们为什么要写个人博客"><a href="#我们为什么要写个人博客" class="headerlink" title="我们为什么要写个人博客"></a>我们为什么要写个人博客</h1><ul><li>时至 2020 年，大众都在用微博，用 Facebook 等自媒体，很多这种平台都被娱乐充斥着，也许自己的博客才是那唯一一片净土。</li><li>对于一些很有特色的博客，那是打造自己的圈子，打造个人品牌的一个方法。</li><li>在 IT 界博客的占比很高，但都是和编程相关的，用来记录自己遇到的问题，解决思路，做知识沉淀。</li></ul><p><strong>让博客重新起航吧！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将博客迁移到 Hexo，让我在这个期间重新想想写博客这件事。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Travelling，下一站去哪？</title>
    <link href="https://kylinlee.github.io/2020/04/09/Travelling%EF%BC%8C%E4%B8%8B%E4%B8%80%E7%AB%99%E5%8E%BB%E5%93%AA%EF%BC%9F/"/>
    <id>https://kylinlee.github.io/2020/04/09/Travelling%EF%BC%8C%E4%B8%8B%E4%B8%80%E7%AB%99%E5%8E%BB%E5%93%AA%EF%BC%9F/</id>
    <published>2020-04-09T14:47:01.000Z</published>
    <updated>2020-05-02T02:07:15.731Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/volfclub/travellings/blob/master/README.md">Travelling</a>，是一个随机友链的工具，此博客于 2020 年 2 月 9 日加入 Travelling，同时也希望更多的朋友能加入。</p><a id="more"></a><h1 id="什么是-Travelling"><a href="#什么是-Travelling" class="headerlink" title="什么是 Travelling"></a>什么是 Travelling</h1><p>Traveling 的本质是一个随机函数，根据随机得出的结果以及与博客的对应关系，跳转到对应的个人博客链接。当你访问<a href="vellings.now.sh">Travelling</a>时，你会被重定向到一个 Travelling 收录的网站，每一个 Travelling 收录的网站都能够继续访问<a href="vellings.now.sh">Travelling</a>，这样便完成了接力，不知不觉的走遍了收录的所有个人博客。</p><h1 id="Travelling-带来了什么"><a href="#Travelling-带来了什么" class="headerlink" title="Travelling 带来了什么"></a>Travelling 带来了什么</h1><h2 id="增加流量"><a href="#增加流量" class="headerlink" title="增加流量"></a>增加流量</h2><p>根据 GitHub 上 Travelling 的作者介绍，Travelling 可以用来增加个人博客的流量。</p><blockquote><p>开往能增加我网站的流量吗？<br>当然。不恰当的估算下：假设当前有 2 个网站加入了开往，每个网站有 10 人使用开往，那么每个网站似乎就增加了 10×2×1/2=10 的流量；如果有 10 个网站加入开往是不是还是平均下来增加 10 人的流量呢？显然不是，因为：</p><ul><li>访客可通过开往多次友链接力；</li><li>有开往的网站多了，单站击量也会提高；</li></ul></blockquote><blockquote><p>这样我们再算算，10 个网站加入了开往，接力次数提升到 3，每个网站有 15 人使用开往，那每个网站就增加了 15×10×3/10=45 的流量。 这也是为什么建议将开往的徽标放在您网站明显位置（推荐顶栏，侧栏）的原因，以便让友链一直接力下去，获得更多的流量。</p></blockquote><p>同时增加博客的曝光度。</p><h2 id="发现大千世界"><a href="#发现大千世界" class="headerlink" title="发现大千世界"></a>发现大千世界</h2><p>除了给自己的网站增加流量，提高曝光度，你还可以通过 Travelling 去发现更多的有趣的博客，很多时候我们想去看看更多博客，却无从选择，那就让 Travelling 帮我们选择吧。</p><h1 id="说点别的"><a href="#说点别的" class="headerlink" title="说点别的"></a>说点别的</h1><p>谈谈 Traveling 的设计，和介绍一样，他还太小，很多功能都不完善，这样的设计很简单，现在的 Travelling 就像一个大容器，所有东西不加区分全部都在这个容器里边，管理起来很不方便。而且要拿取里面的东西，只能往这里边拿，当 Traveling 庞大起来，这样的设计缺陷就会很明显。</p><h2 id="对-Travelling-的期望"><a href="#对-Travelling-的期望" class="headerlink" title="对 Travelling 的期望"></a>对 Travelling 的期望</h2><p>个人更倾向于分布式的设计，将不同类别的博客放进不同的小容器，对这些博客加以区分，使用的时候带上标记，这样可以很大概率找到喜欢的博客。<br>此外，除了统一收录，每个博客也应该有一些自己的“朋友圈”，用 Travelling 去寻找每一个网站的“朋友圈”也是一件有趣的事情。<br><strong>Travelling 的潜力还是很大的，希望 Travelling 能越走越远</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/volfclub/travellings/blob/master/README.md&quot;&gt;Travelling&lt;/a&gt;，是一个随机友链的工具，此博客于 2020 年 2 月 9 日加入 Travelling，同时也希望更多的朋友能加入。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Life" scheme="https://kylinlee.github.io/categories/Life/"/>
    
    
      <category term="Recommend" scheme="https://kylinlee.github.io/tags/Recommend/"/>
    
      <category term="Life" scheme="https://kylinlee.github.io/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>我眼中的愚人节</title>
    <link href="https://kylinlee.github.io/2020/04/01/%E6%88%91%E7%9C%BC%E4%B8%AD%E7%9A%84%E6%84%9A%E4%BA%BA%E8%8A%82/"/>
    <id>https://kylinlee.github.io/2020/04/01/%E6%88%91%E7%9C%BC%E4%B8%AD%E7%9A%84%E6%84%9A%E4%BA%BA%E8%8A%82/</id>
    <published>2020-04-01T14:03:48.000Z</published>
    <updated>2020-05-02T02:06:15.664Z</updated>
    
    <content type="html"><![CDATA[<p>也许因为某些原因，这个愚人节在我眼里和往常并不一样，我觉的有必要记录一下这个特殊时期的愚人节。</p><a id="more"></a><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>在写这篇文章之前，我搜索了两个问题，一个是在百度百科上搜索了愚人节的由来及习俗，其实相当无聊，可以理解为互相取乐，每个人在这一天都在以最夸张的手法获得最大的快乐。另一个是在知乎上搜索愚人节的意义，我选择了其中一条回答作为了我的答案，一个值得思考的答案。</p><h1 id="我身边的愚人节"><a href="#我身边的愚人节" class="headerlink" title="我身边的愚人节"></a>我身边的愚人节</h1><p>我没有过西方节日的习惯，不会去编一些愚人节的笑话，但是氛围在，还是会听到一些“愚弄别人”的消息。</p><h2 id="1-班群头像变了"><a href="#1-班群头像变了" class="headerlink" title="1.班群头像变了"></a>1.班群头像变了</h2><p>一大早醒来，发现班群头像变了，接着发来一条消息，大概内容是“学院被清华大学合并！”，稀里糊涂的我虽然没意识到今天是愚人节，但我还是相信自己的判断，这是不可能的。</p><h2 id="2-暑假没了"><a href="#2-暑假没了" class="headerlink" title="2.暑假没了"></a>2.暑假没了</h2><p>群里突然出现一条消息，标题写道：”教育部通知：全国一本高校取消暑假“，照西方节日习俗，那我算是今年的愚人了。</p><h2 id="3-FreeVOOC"><a href="#3-FreeVOOC" class="headerlink" title="3.FreeVOOC"></a>3.FreeVOOC</h2><p>这是一个拥有 VOOC 充电技术的手机厂商在愚人节当天推送的新浪微博，称 FreeVOOC 实现了 10m 范围内稳定功率无线充电。</p><h1 id="愚人节的意义"><a href="#愚人节的意义" class="headerlink" title="愚人节的意义"></a>愚人节的意义</h1><p>当我在知乎上寻求答案的时候，看到一句很值得思考的一句话，原话是：”一个节日具有什么意义不重要，重要的是你把它过成什么意义。“，这句话也许正好总结出了我的心里话，这大概就是我为什么觉得今年的愚人节不一样的原因吧。</p><h2 id="去年的愚人节"><a href="#去年的愚人节" class="headerlink" title="去年的愚人节"></a>去年的愚人节</h2><p>去年我在 QQ 空间发了一条博客，希望我们每个人都像愚人节这天一样快乐。</p><h2 id="我眼中的愚人节"><a href="#我眼中的愚人节" class="headerlink" title="我眼中的愚人节"></a>我眼中的愚人节</h2><p>这些”愚弄人“的消息，无非是两种，一种是表达愿景，将这些愿景写进去，在今天就好像实现了一样。一种是不想发生的事，当被人揭穿的时候，才证明这些事并没有发生，也算是给自己一些安慰，一些鼓励吧。在这一天，我听到的各种脑洞大开的事，并非是异想天开，其实是在内心深处，一直无法实现的愿景、一直无法面对的痛楚。</p><h1 id="落在最后"><a href="#落在最后" class="headerlink" title="落在最后"></a>落在最后</h1><p><strong>希望每个人都能像过愚人节这样，不管最终结果，大胆的去想，去做</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;也许因为某些原因，这个愚人节在我眼里和往常并不一样，我觉的有必要记录一下这个特殊时期的愚人节。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Life" scheme="https://kylinlee.github.io/categories/Life/"/>
    
    
      <category term="Life" scheme="https://kylinlee.github.io/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>我们把爱情想复杂了</title>
    <link href="https://kylinlee.github.io/2020/03/20/%E6%88%91%E4%BB%AC%E6%8A%8A%E7%88%B1%E6%83%85%E6%83%B3%E5%A4%8D%E6%9D%82%E4%BA%86/"/>
    <id>https://kylinlee.github.io/2020/03/20/%E6%88%91%E4%BB%AC%E6%8A%8A%E7%88%B1%E6%83%85%E6%83%B3%E5%A4%8D%E6%9D%82%E4%BA%86/</id>
    <published>2020-03-20T04:41:12.000Z</published>
    <updated>2020-05-02T02:24:06.464Z</updated>
    
    <content type="html"><![CDATA[<p>有时候是我们把爱情想复杂了。</p><a id="more"></a><p>有时候是我们把爱情想复杂了。</p><p>在一段未知的感情面前，我们表现得过于谨慎。</p><p>纠结过很多东西，也在心里计算着自己在感情中的得失。</p><p>等我们确认无误转身想接受时，却发现那个人已经离开，去寻找他自己的幸福。</p><p>什么是爱情？我也很难说清楚。或许就是你看着对方的眼睛，能让你心跳加速；</p><p>能将自己身上那些小秘密，毫无保留的说给她听；不论什么时候，都能在对方的身上找到吸引你的点。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候是我们把爱情想复杂了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Life" scheme="https://kylinlee.github.io/categories/Life/"/>
    
      <category term="Love" scheme="https://kylinlee.github.io/categories/Life/Love/"/>
    
    
      <category term="Love" scheme="https://kylinlee.github.io/tags/Love/"/>
    
  </entry>
  
</feed>
