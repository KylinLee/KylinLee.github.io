<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蝶恋花-等风也等你</title>
  
  <subtitle>等风也等你</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kylinlee.github.io/"/>
  <updated>2020-05-17T14:05:44.985Z</updated>
  <id>https://kylinlee.github.io/</id>
  
  <author>
    <name>Kylin Lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript this详解</title>
    <link href="https://kylinlee.github.io/2020/05/17/JavaScript-this%E8%AF%A6%E8%A7%A3/"/>
    <id>https://kylinlee.github.io/2020/05/17/JavaScript-this%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-05-17T14:05:44.000Z</published>
    <updated>2020-05-17T14:05:44.985Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><article class="message message-immersive is-warning"><div class="message-body"><i class="fas fa-exclamation-triangle mr-2"></i>本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</div></article>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Code" scheme="https://kylinlee.github.io/categories/Code/"/>
    
    
      <category term="JavaScript" scheme="https://kylinlee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>FirstStrike!</title>
    <link href="https://kylinlee.github.io/2020/05/17/FirstStrike/"/>
    <id>https://kylinlee.github.io/2020/05/17/FirstStrike/</id>
    <published>2020-05-17T01:50:04.000Z</published>
    <updated>2020-05-17T04:39:24.068Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="http://www.firststrike.mobi/">FirstStrike</a>，是一款以核打击为题材的单机游戏，中文名：先发制人。</p><a id="more"></a><p>这是一个很早以前就开始玩的游戏，因为打游戏不上瘾，经常都不会玩一次，所以我的很多游戏都是还没打完就卸载了的，昨天心血来潮重新开始玩这款游戏，真的是非常好的一款游戏，我这样不太爱玩游戏的人都会时常回来玩两局，以前是没有中文版的，所以国内知道的比较少，现在 Google play 上下载的最新版支持中文了，对国人更友好，索性今天写个简单的介绍，将这款游戏推荐给大家。</p><h1 id="简单的做个属性介绍："><a href="#简单的做个属性介绍：" class="headerlink" title="简单的做个属性介绍："></a>简单的做个属性介绍：</h1><blockquote><p>外文名：First Strike<br>中文名：先发制人<br>游戏类别：战争策略<br>平台：Android iOS<br>厂商：<a href="http://blindflugstudios.com/">blindflugstudios</a></p></blockquote><h1 id="游戏玩法："><a href="#游戏玩法：" class="headerlink" title="游戏玩法："></a>游戏玩法：</h1><p>在游戏中，你将扮演一个拥有核打击能力国家的政府首脑，通过战略（研究武器，建立外交，核打击）等征服其他国家，成为世界上唯一的超级大国，同时你也需要保护自己的国家免受核打击。</p><h1 id="游戏截图："><a href="#游戏截图：" class="headerlink" title="游戏截图："></a>游戏截图：</h1><h2 id="中文支持"><a href="#中文支持" class="headerlink" title="中文支持"></a>中文支持</h2><p>这款游戏是非常容易上手的，官方的支持中文一并连 Guide 都支持了<br><img src="https://i.loli.net/2020/05/17/BbOYrxw752m4A8D.jpg" alt="first-strike-start.jpg"></p><h2 id="控制面板"><a href="#控制面板" class="headerlink" title="控制面板"></a>控制面板</h2><p>游戏控制的主体是一个地球，点击你的领土会弹出炫酷的 3D 控制面板<br><img src="https://i.loli.net/2020/05/17/uqSWic6fLHAj3P1.jpg" alt="first-strike-control.jpg"></p><h2 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h2><p>每次核打击都会有这样的提示<br><img src="https://i.loli.net/2020/05/17/ra3cJ79sSNyY5bx.jpg" alt="first-strike-died.jpg"></p><h2 id="核打击"><a href="#核打击" class="headerlink" title="核打击"></a>核打击</h2><p>全面核打击<br><img src="https://i.loli.net/2020/05/17/YWRhEl9H1TPCAG6.jpg" alt="first-strike-attack.jpg"></p><h2 id="武器"><a href="#武器" class="headerlink" title="武器"></a>武器</h2><p>超级核武器<br><img src="https://i.loli.net/2020/05/17/VBoTdhqu3ncjf1v.png" alt="first-strike-super-weapon.png"></p><h1 id="为什么推荐"><a href="#为什么推荐" class="headerlink" title="为什么推荐"></a>为什么推荐</h1><h2 id="它的意义"><a href="#它的意义" class="headerlink" title="它的意义"></a>它的意义</h2><p>在战略游戏中获胜往往能给我们带来成就感，尤其是你扮演着一个超级大国的时候，但在这个游戏中获胜时你不会有这种感觉。</p><p>如果你玩过<a href="https://www.ndemiccreations.com/en/22-plague-inc">PLAGUE INC.</a>(瘟疫公司)，再玩这款游戏的时候，你会和玩瘟疫公司时有同样的感慨：“这简直就是毁灭人类的节奏啊！”。<br><img src="https://i.loli.net/2020/05/17/hbiGwFzdPjoHCla.png" alt="first-strike-win.png"></p><blockquote><p>你真的赢了吗？<br>你毁灭了多少个国家和地区？<br>你让多少人成为了受害者？<br>你释放了多少当量？</p></blockquote><p>我喜欢这个游戏不仅仅是因为它好玩，而是在于它和别的游戏出发点不同，每一款游戏都是一个作品，但不是所有作品都是有灵魂的，当你玩一个游戏的时候，你仔细想想，这个游戏真正的意义在哪。在 FirstStrike 中你能很清楚的明白创造它的人想告诉我们什么。</p><h2 id="制作精良"><a href="#制作精良" class="headerlink" title="制作精良"></a>制作精良</h2><p>无论是操作，还是整体风格，都是满满的科技感，细节处理也很到位，比如一个地区受到核打击后是不能立即建立防御体系和核武器库的，在细微之处演绎核武器带来的危害。</p><h1 id="其他推荐"><a href="#其他推荐" class="headerlink" title="其他推荐"></a>其他推荐</h1><h2 id="FirstStrike-FinalHour"><a href="#FirstStrike-FinalHour" class="headerlink" title="FirstStrike:FinalHour"></a>FirstStrike:FinalHour</h2><p>目前 FirstStrike 仅支持 Android 和 iOS 平台，如果你想在电脑上玩，可以尝试<a href="http://www.firststrikefinalhour.com/">FirstStrike:FinalHour</a>，这是 FirstStrike 的制作团队的续作（和 FirstStrike 差别不大），现已登录 steam，FirstStrike:FinalHour 也支持移动版。</p><h2 id="Stellar-Commanders"><a href="#Stellar-Commanders" class="headerlink" title="Stellar Commanders"></a>Stellar Commanders</h2><p>FirstStrike 团队新近发布的<a href="https://www.stellarcommanders.com/">Stellar Commanders</a>，可以理解为 FirstStrike 的联机版本，可以和小伙伴们一起玩。</p><article class="message message-immersive is-warning"><div class="message-body"><i class="fas fa-exclamation-triangle mr-2"></i>本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</div></article>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.firststrike.mobi/&quot;&gt;FirstStrike&lt;/a&gt;，是一款以核打击为题材的单机游戏，中文名：先发制人。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Life" scheme="https://kylinlee.github.io/categories/Life/"/>
    
      <category term="Game" scheme="https://kylinlee.github.io/categories/Life/Game/"/>
    
    
      <category term="Other" scheme="https://kylinlee.github.io/tags/Other/"/>
    
      <category term="Recommend" scheme="https://kylinlee.github.io/tags/Recommend/"/>
    
  </entry>
  
  <entry>
    <title>在Hexo上分享歌曲</title>
    <link href="https://kylinlee.github.io/2020/05/09/%E5%9C%A8Hexo%E4%B8%8A%E5%88%86%E4%BA%AB%E6%AD%8C%E6%9B%B2/"/>
    <id>https://kylinlee.github.io/2020/05/09/%E5%9C%A8Hexo%E4%B8%8A%E5%88%86%E4%BA%AB%E6%AD%8C%E6%9B%B2/</id>
    <published>2020-05-09T07:10:49.000Z</published>
    <updated>2020-05-17T01:57:56.683Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>一款大名鼎鼎的 JS 插件，在 Hexo 上也能听歌了！</p><a id="more"></a><p>这是一款叫做<code>aplayer.js</code>的开源插件，通过简单的配置就能在页面中插入美观的音乐播放控件，<a href="https://aplayer.js.org/">插件地址</a>。<br>一起来看一看效果吧！<br><img src="https://i.loli.net/2020/05/09/UVZO3zNJqx7amB6.jpg" alt="netease-28315295.jpg"></p>    <div id="aplayer-SwWmVrJi" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="28315295" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="false" data-listmaxheight="340px" data-preload="none" data-theme="#2e5666"    ></div><article class="message message-immersive is-warning"><div class="message-body"><i class="fas fa-exclamation-triangle mr-2"></i>本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</div></article>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一款大名鼎鼎的 JS 插件，在 Hexo 上也能听歌了！&lt;/p&gt;
    
    </summary>
    
    
      <category term="Life" scheme="https://kylinlee.github.io/categories/Life/"/>
    
      <category term="Music" scheme="https://kylinlee.github.io/categories/Life/Music/"/>
    
    
      <category term="Other" scheme="https://kylinlee.github.io/tags/Other/"/>
    
      <category term="Recommend" scheme="https://kylinlee.github.io/tags/Recommend/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript快速拷贝数组的几种方法</title>
    <link href="https://kylinlee.github.io/2020/05/09/JavaScript%E5%BF%AB%E9%80%9F%E6%8B%B7%E8%B4%9D%E6%95%B0%E7%BB%84%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://kylinlee.github.io/2020/05/09/JavaScript%E5%BF%AB%E9%80%9F%E6%8B%B7%E8%B4%9D%E6%95%B0%E7%BB%84%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2020-05-09T02:50:43.000Z</published>
    <updated>2020-05-11T12:35:40.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文总结快速拷贝数组的几种方法（个人认为总结都很无聊），文章旨(chun)在(shu)总(wu)结(liao)，对于日常编码，只需挑选一种写法即可，通过本文，你将对 JavaScript 数组方法及 ES6 有更多的了解。</p><a id="more"></a><p>为了不重复写代码，所有例子都是以下面这个环境为基础。</p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> exampleArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><p>还是写一些基础的<code>for</code>循环吧</p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> length = exampleArr.length;</span><br><span class="line"><span class="keyword">const</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">  newArr.push(exampleArr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>forEach()</code></p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newArr = [];</span><br><span class="line">exampleArr.forEach(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  newArr.push(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果面试官问你如何拷贝一个数组，你只会<code>for</code>循环，那估计你是凉凉了。</p><h1 id="Array-prototype-map"><a href="#Array-prototype-map" class="headerlink" title="Array.prototype.map()"></a><code>Array.prototype.map()</code></h1><p><code>map()</code>方法建一个新数组，其结果是该数组中的每个元素都调用一次提供的函数后的返回值。<br>这种方法和<code>forEach()</code>相差无几，都是通过回调函数来为新数组赋值。</p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newArr = exampleArr.map(<span class="function">(<span class="params">value</span>) =&gt;</span> value);</span><br></pre></td></tr></table></figure><h1 id="Array-prototype-filter"><a href="#Array-prototype-filter" class="headerlink" title="Array.prototype.filter()"></a><code>Array.prototype.filter()</code></h1><p><code>filter()</code>方法返回一个回调函数过滤后的新数组，他有一个回调函数和指向当前数组的<code>this</code>（可选参数）作为参数，回调函数的参数和<code>forEach()</code>及<code>map()</code>方法相同，当回调函数返回<code>true</code>时则将当前处理元素放进新数组。</p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newArr = exampleArr.filter(<span class="function">(<span class="params">i</span>) =&gt;</span> <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h1 id="Array-prototype-concat"><a href="#Array-prototype-concat" class="headerlink" title="Array.prototype.concat()"></a><code>Array.prototype.concat()</code></h1><p><code>concat()</code>方法用于合并两个或多个数组，并返回一个新数组，参数可以是 0 个或多个数组。<br>当有 0 个参数的时候显然会返回一个拷贝数组：</p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newArr = exampleArr.concat();</span><br></pre></td></tr></table></figure><h1 id="Array-prototype-slice"><a href="#Array-prototype-slice" class="headerlink" title="Array.prototype.slice()"></a><code>Array.prototype.slice()</code></h1><p><code>slice()</code>方法实现了数组的浅拷贝，就是说当拷贝数组里的对象时只会保留引用。<br>它有两个可选索引参数，由于确定从何处开始拷贝，何处停止拷贝，如果省略参数即拷贝整个数组。</p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newArr = exampleArr.slice();</span><br></pre></td></tr></table></figure><p>还有一个和<code>slice()</code>方法类似的<code>copyWithin()</code>方法，他们都是浅拷贝，但<code>copyWithin()</code>浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。说的不是很明白？举个例子：</p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>];</span><br><span class="line">array1.copyWithin(<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>它的第一个参数是开始替换的索引位置，后面两个可选参数分别表示从何处开始复制，在何处结束复制，如果省略即复制整个数组。上面这个例子表示复制索引[3,4)的值(左闭右开)，然后将每个值从第 0 个索引开始覆写。最终值将是[“d”,”b”,”c”,”d”,”e”]。</p><p>所以下面这种写法并不是拷贝数组，因为它的拷贝值都赋值给自身了，<code>newArr</code>仅仅是保留了引用。</p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newArr = exampleArr.copyWithin(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h1 id="数组解构-剩余参数"><a href="#数组解构-剩余参数" class="headerlink" title="数组解构+剩余参数"></a>数组解构+剩余参数</h1><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [...newArr] = exampleArr;</span><br></pre></td></tr></table></figure><p>数组解构是 ES6 中的语法，通过数组解构可以将数组的值保存到解构对应的变量中，当不想一一赋值的时候可以使用剩余参数，将所有剩余的值保存在一个数组中，上面这段代码就是这种做法，将所有的值保存在<code>newArr</code>中。<br>注意是<strong>剩余参数</strong>，而不是扩展运算，二者很像，他们的区别在下一篇文章中讨论，欢迎关注。</p><article class="message message-immersive is-warning"><div class="message-body"><i class="fas fa-exclamation-triangle mr-2"></i>本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</div></article>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文总结快速拷贝数组的几种方法（个人认为总结都很无聊），文章旨(chun)在(shu)总(wu)结(liao)，对于日常编码，只需挑选一种写法即可，通过本文，你将对 JavaScript 数组方法及 ES6 有更多的了解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="https://kylinlee.github.io/categories/Code/"/>
    
    
      <category term="JavaScript" scheme="https://kylinlee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScrip实现计数器的多种方法</title>
    <link href="https://kylinlee.github.io/2020/05/08/JavaScrip%E5%AE%9E%E7%8E%B0%E8%AE%A1%E6%95%B0%E5%99%A8%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://kylinlee.github.io/2020/05/08/JavaScrip%E5%AE%9E%E7%8E%B0%E8%AE%A1%E6%95%B0%E5%99%A8%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2020-05-08T14:17:19.000Z</published>
    <updated>2020-05-17T02:03:19.145Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>总结一下 JavaScript 实现计数器的几种方法，对于写出高性能代码有一定的帮助，同时也包含一些蛇皮操作。</p><a id="more"></a><h1 id="普通写法"><a href="#普通写法" class="headerlink" title="普通写法"></a>普通写法</h1><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ++counter;</span><br><span class="line">&#125;</span><br><span class="line">countUp();</span><br></pre></td></tr></table></figure><p>创建一个全局变量<code>counter</code>，每次调用<code>countUp()</code>都会使<code>counter</code>的值＋ 1，但是我们都知道无论是用何种语言写代码，都应该尽量使用少的全局变量，于是就有了下面这种经典写法。</p><h1 id="使用闭包"><a href="#使用闭包" class="headerlink" title="使用闭包"></a>使用闭包</h1><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countUp = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ++count;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line">countUp();</span><br></pre></td></tr></table></figure><p>这种写法能使用更少的全局变量，但闭包终归有闭包的缺点，它不会被垃圾回收机制处理，同时也不能像上一种写法那样重置<code>counter</code>，于是就有了下面这种写法。</p><h1 id="使用函数属性"><a href="#使用函数属性" class="headerlink" title="使用函数属性"></a>使用函数属性</h1><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countUp = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> countUp.count++;</span><br><span class="line">&#125;;</span><br><span class="line">countUp.counter = <span class="number">1</span>;</span><br><span class="line">countUp();</span><br></pre></td></tr></table></figure><p>在 JavaScript 中函数是一种特殊的对象，既然是对象，那他自然也有属性，我们定义一个函数来操作它的<code>counter</code>属性。这种写法很好的解决了上面三个问题：</p><ol><li>解决闭包的内存占用</li><li>可以重置<code>counter</code></li><li>尽量少的全局变量</li></ol><p>如果你会<code>TypeScript</code>，那么通过下面这个例子你能更好的理解函数属性。</p><figure class="highlight typescript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> CountUp &#123;</span><br><span class="line">  (): <span class="built_in">number</span>;</span><br><span class="line">  counter: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码定义了一个函数接口，这个函数拥有 0 个参数，返回值是一个<code>number</code>类型的值，并且有<code>counter</code>属性。</p><p>让我们看看最后一种写法，这种写法没有任何优势，甚至是大材小用的写法。</p><h1 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h1><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> counter = (<span class="function"><span class="keyword">function</span>* <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">yield</span> <span class="built_in">console</span>.log(count);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> counter.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，我们使用了一个无限迭代器来实现，通过使用<code>counter.next()</code>来手动使迭代器迭代，个人认为这种写法比使用闭包的开销还要大，用作计数器实在是大材小用了。迭代器在 ES6 之前就被实现了，在 ES6 中才正式成为规范，它在 JavaScript 的作用通常是用来构建异步函数（async/await）。</p><p>虽然最后这种写法没有什么实质性的作用，但对于理解迭代器还是有帮助的，另外，有些厂笔试就喜欢出这种花里胡哨的题。</p><article class="message message-immersive is-warning"><div class="message-body"><i class="fas fa-exclamation-triangle mr-2"></i>本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</div></article>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结一下 JavaScript 实现计数器的几种方法，对于写出高性能代码有一定的帮助，同时也包含一些蛇皮操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="https://kylinlee.github.io/categories/Code/"/>
    
    
      <category term="JavaScript" scheme="https://kylinlee.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
