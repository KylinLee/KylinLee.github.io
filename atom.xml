<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蝶恋花-等风也等你</title>
  
  <subtitle>等风也等你</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kylinlee.github.io/"/>
  <updated>2020-05-11T12:34:29.668Z</updated>
  <id>https://kylinlee.github.io/</id>
  
  <author>
    <name>Kylin Lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在Hexo上分享歌曲</title>
    <link href="https://kylinlee.github.io/2020/05/09/%E5%9C%A8Hexo%E4%B8%8A%E5%88%86%E4%BA%AB%E6%AD%8C%E6%9B%B2/"/>
    <id>https://kylinlee.github.io/2020/05/09/%E5%9C%A8Hexo%E4%B8%8A%E5%88%86%E4%BA%AB%E6%AD%8C%E6%9B%B2/</id>
    <published>2020-05-09T07:10:49.000Z</published>
    <updated>2020-05-11T12:34:29.668Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>一款大名鼎鼎的 JS 插件，在 Hexo 上也能听歌了！</p><a id="more"></a><p>这是一款叫做<code>aplayer.js</code>的开源插件，通过简单的配置就能在页面中插入美观的音乐播放控件，<a href="https://aplayer.js.org/">插件地址</a>。<br>一起来看一看效果吧！<br><img src="https://i.loli.net/2020/05/09/UVZO3zNJqx7amB6.jpg" alt="netease-28315295.jpg"></p>    <div id="aplayer-ptkXpbtp" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="28315295" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="false" data-listmaxheight="340px" data-preload="none" data-theme="#2e5666"    ></div><article class="message message-immersive is-warning"><div class="message-body"><i class="fas fa-exclamation-triangle mr-2"></i>本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</div></article>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一款大名鼎鼎的 JS 插件，在 Hexo 上也能听歌了！&lt;/p&gt;
    
    </summary>
    
    
      <category term="Life" scheme="https://kylinlee.github.io/categories/Life/"/>
    
      <category term="Music" scheme="https://kylinlee.github.io/categories/Life/Music/"/>
    
    
      <category term="Other" scheme="https://kylinlee.github.io/tags/Other/"/>
    
      <category term="Recommend" scheme="https://kylinlee.github.io/tags/Recommend/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript快速拷贝数组的几种方法</title>
    <link href="https://kylinlee.github.io/2020/05/09/JavaScript%E5%BF%AB%E9%80%9F%E6%8B%B7%E8%B4%9D%E6%95%B0%E7%BB%84%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://kylinlee.github.io/2020/05/09/JavaScript%E5%BF%AB%E9%80%9F%E6%8B%B7%E8%B4%9D%E6%95%B0%E7%BB%84%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2020-05-09T02:50:43.000Z</published>
    <updated>2020-05-11T12:35:40.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文总结快速拷贝数组的几种方法（个人认为总结都很无聊），文章旨(chun)在(shu)总(wu)结(liao)，对于日常编码，只需挑选一种写法即可，通过本文，你将对 JavaScript 数组方法及 ES6 有更多的了解。</p><a id="more"></a><p>为了不重复写代码，所有例子都是以下面这个环境为基础。</p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> exampleArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><p>还是写一些基础的<code>for</code>循环吧</p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> length = exampleArr.length;</span><br><span class="line"><span class="keyword">const</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">  newArr.push(exampleArr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>forEach()</code></p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newArr = [];</span><br><span class="line">exampleArr.forEach(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  newArr.push(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果面试官问你如何拷贝一个数组，你只会<code>for</code>循环，那估计你是凉凉了。</p><h1 id="Array-prototype-map"><a href="#Array-prototype-map" class="headerlink" title="Array.prototype.map()"></a><code>Array.prototype.map()</code></h1><p><code>map()</code>方法建一个新数组，其结果是该数组中的每个元素都调用一次提供的函数后的返回值。<br>这种方法和<code>forEach()</code>相差无几，都是通过回调函数来为新数组赋值。</p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newArr = exampleArr.map(<span class="function">(<span class="params">value</span>) =&gt;</span> value);</span><br></pre></td></tr></table></figure><h1 id="Array-prototype-filter"><a href="#Array-prototype-filter" class="headerlink" title="Array.prototype.filter()"></a><code>Array.prototype.filter()</code></h1><p><code>filter()</code>方法返回一个回调函数过滤后的新数组，他有一个回调函数和指向当前数组的<code>this</code>（可选参数）作为参数，回调函数的参数和<code>forEach()</code>及<code>map()</code>方法相同，当回调函数返回<code>true</code>时则将当前处理元素放进新数组。</p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newArr = exampleArr.filter(<span class="function">(<span class="params">i</span>) =&gt;</span> <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h1 id="Array-prototype-concat"><a href="#Array-prototype-concat" class="headerlink" title="Array.prototype.concat()"></a><code>Array.prototype.concat()</code></h1><p><code>concat()</code>方法用于合并两个或多个数组，并返回一个新数组，参数可以是 0 个或多个数组。<br>当有 0 个参数的时候显然会返回一个拷贝数组：</p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newArr = exampleArr.concat();</span><br></pre></td></tr></table></figure><h1 id="Array-prototype-slice"><a href="#Array-prototype-slice" class="headerlink" title="Array.prototype.slice()"></a><code>Array.prototype.slice()</code></h1><p><code>slice()</code>方法实现了数组的浅拷贝，就是说当拷贝数组里的对象时只会保留引用。<br>它有两个可选索引参数，由于确定从何处开始拷贝，何处停止拷贝，如果省略参数即拷贝整个数组。</p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newArr = exampleArr.slice();</span><br></pre></td></tr></table></figure><p>还有一个和<code>slice()</code>方法类似的<code>copyWithin()</code>方法，他们都是浅拷贝，但<code>copyWithin()</code>浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。说的不是很明白？举个例子：</p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>];</span><br><span class="line">array1.copyWithin(<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>它的第一个参数是开始替换的索引位置，后面两个可选参数分别表示从何处开始复制，在何处结束复制，如果省略即复制整个数组。上面这个例子表示复制索引[3,4)的值(左闭右开)，然后将每个值从第 0 个索引开始覆写。最终值将是[“d”,”b”,”c”,”d”,”e”]。</p><p>所以下面这种写法并不是拷贝数组，因为它的拷贝值都赋值给自身了，<code>newArr</code>仅仅是保留了引用。</p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newArr = exampleArr.copyWithin(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h1 id="数组解构-剩余参数"><a href="#数组解构-剩余参数" class="headerlink" title="数组解构+剩余参数"></a>数组解构+剩余参数</h1><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [...newArr] = exampleArr;</span><br></pre></td></tr></table></figure><p>数组解构是 ES6 中的语法，通过数组解构可以将数组的值保存到解构对应的变量中，当不想一一赋值的时候可以使用剩余参数，将所有剩余的值保存在一个数组中，上面这段代码就是这种做法，将所有的值保存在<code>newArr</code>中。<br>注意是<strong>剩余参数</strong>，而不是扩展运算，二者很像，他们的区别在下一篇文章中讨论，欢迎关注。</p><article class="message message-immersive is-warning"><div class="message-body"><i class="fas fa-exclamation-triangle mr-2"></i>本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</div></article>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文总结快速拷贝数组的几种方法（个人认为总结都很无聊），文章旨(chun)在(shu)总(wu)结(liao)，对于日常编码，只需挑选一种写法即可，通过本文，你将对 JavaScript 数组方法及 ES6 有更多的了解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="https://kylinlee.github.io/categories/Code/"/>
    
    
      <category term="JavaScript" scheme="https://kylinlee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScrip实现计数器的多种方法</title>
    <link href="https://kylinlee.github.io/2020/05/08/JavaScrip%E5%AE%9E%E7%8E%B0%E8%AE%A1%E6%95%B0%E5%99%A8%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://kylinlee.github.io/2020/05/08/JavaScrip%E5%AE%9E%E7%8E%B0%E8%AE%A1%E6%95%B0%E5%99%A8%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2020-05-08T14:17:19.000Z</published>
    <updated>2020-05-11T12:36:08.451Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>总结一下 JavaScript 实现计数器的几种方法，对于写出高性能代码有一定的帮助，同时也包含一些蛇皮操作。</p><a id="more"></a><h1 id="普通写法"><a href="#普通写法" class="headerlink" title="普通写法"></a>普通写法</h1><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ++counter;</span><br><span class="line">&#125;</span><br><span class="line">countUp();</span><br></pre></td></tr></table></figure><p>创建一个全局变量<code>counter</code>，每次调用<code>countUp()</code>都会使<code>counter</code>的值＋ 1，但是我们都知道无论是用何种语言写代码，都应该尽量使用少的全局变量，于是就有了下面这种经典写法。</p><h1 id="使用闭包"><a href="#使用闭包" class="headerlink" title="使用闭包"></a>使用闭包</h1><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countUp = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ++count;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line">countUp();</span><br></pre></td></tr></table></figure><p>这种写法能使用更少的全局变量，但闭包终归有闭包的缺点，它不会被垃圾回收机制处理，同时也不能像上一种写法那样重置<code>counter</code>，于是就有了下面这种写法。</p><h1 id="使用函数属性"><a href="#使用函数属性" class="headerlink" title="使用函数属性"></a>使用函数属性</h1><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countUp = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> countUp.count++;</span><br><span class="line">&#125;;</span><br><span class="line">countUp.counter = <span class="number">1</span>;</span><br><span class="line">countUp();</span><br></pre></td></tr></table></figure><p>在 JavaScript 中函数是一种特殊的对象，既然是对象，那他自然也有属性，我们定义一个函数来操作它的<code>counter</code>属性。这种写法很好的解决了上面三个问题：</p><ol><li>解决闭包的内存占用</li><li>可以重置<code>counter</code></li><li>尽量少的全局变量</li></ol><p>如果你会<code>TypeScript</code>，那么通过下面这个例子你能更好的理解函数属性。</p><figure class="highlight typescript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> CountUp &#123;</span><br><span class="line">  (): <span class="built_in">number</span>;</span><br><span class="line">  counter: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码定义了一个函数接口，这个函数拥有 0 个参数，返回值是一个<code>number</code>类型的值，并且有<code>counter</code>属性。</p><p>让我们看看最后一种写法，这种写法没有任何优势，甚至是大材小用的写法。</p><h1 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h1><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> counter = (<span class="function"><span class="keyword">function</span>* <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">yield</span> <span class="built_in">console</span>.log(count);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> counter.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，我们使用了一个无限迭代器来实现，通过使用<code>counter.next()</code>来手动使迭代器迭代，个人认为这种写法比使用闭包的开销还要大，用作计数器实在是大材小用了。迭代器在 ES6 之前就被实现了，在 ES6 中才正式成为规范，它在 JavaScript 的作用通常是用来构建异步函数（async/await）。</p><p>虽然最后这种写法没有什么实质性的作用，但对于理解迭代器还是有帮助的，另外，有些厂笔试就喜欢出这种花里胡哨的题。</p><article class="message message-immersive is-warning"><div class="message-body"><i class="fas fa-exclamation-triangle mr-2"></i>本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</div></article>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结一下 JavaScript 实现计数器的几种方法，对于写出高性能代码有一定的帮助，同时也包含一些蛇皮操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="https://kylinlee.github.io/categories/Code/"/>
    
    
      <category term="JavaScript" scheme="https://kylinlee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>简单易懂讲闭包</title>
    <link href="https://kylinlee.github.io/2020/05/03/%E7%AE%80%E5%8D%95%E6%98%93%E6%87%82%E8%AE%B2%E9%97%AD%E5%8C%85/"/>
    <id>https://kylinlee.github.io/2020/05/03/%E7%AE%80%E5%8D%95%E6%98%93%E6%87%82%E8%AE%B2%E9%97%AD%E5%8C%85/</id>
    <published>2020-05-03T08:27:24.000Z</published>
    <updated>2020-05-11T12:33:35.245Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>刚看到了 Rust 语言中利用闭包实现匿名函数，想着博客许久没更新了，那就写一篇帮助大家理解吧。闭包是 JavaScript 的一个特点，搜索引擎搜索<code>闭包</code>基本都会用 JavaScript 做例子，同时闭包也是 JavaScript 初学者较难理解的一个部分。</p><a id="more"></a><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="作用域规则"><a href="#作用域规则" class="headerlink" title="作用域规则"></a>作用域规则</h2><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> variable = <span class="string">"variable"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readVar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> innerVariable = <span class="string">"innerVariable"</span>;</span><br><span class="line">  <span class="keyword">return</span> variable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(innerVariable); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>这段代码说明的是 JavaScript 的作用域链规则，<code>readVar</code>函数执行时没有在自身作用域内找到<code>variable</code>变量，于是向上层作用域寻找，并使用它。简单来说就是子作用域能使用父作用域的变量，而父作用域不能使用子作用域的变量。</p><h1 id="讲清楚什么是闭包"><a href="#讲清楚什么是闭包" class="headerlink" title="讲清楚什么是闭包"></a>讲清楚什么是闭包</h1><h2 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h2><p>闭包保存的是函数和函数运行的必要环境（使用到的变量等），它和<em>作用域</em>类似，但闭包只是包含一部分作用域，<strong>它是函数和函数使用的外部变量的集合</strong>。</p><h2 id="产生"><a href="#产生" class="headerlink" title="产生"></a>产生</h2><p>闭包在函数创建时就会产生，只要使用函数就存在闭包。</p><h2 id="利用闭包"><a href="#利用闭包" class="headerlink" title="利用闭包"></a>利用闭包</h2><p>按照上面所述，只要有函数就有闭包，但是我们在使用的时候感受不到闭包的存在。要怎么利用闭包呢？</p><p>这个例子已经被用烂了，但是用它来讲闭包也再合适不过了。</p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countUp = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ++count;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 每调用一次返回一个比上一次大1的值</span></span><br><span class="line">countUp();</span><br></pre></td></tr></table></figure><p>第 4 行使用了一个父作用域的变量<code>count</code>，可以改变<code>count</code>的值，第 3 行将一个匿名函数返回到<code>countUp</code>外部，相当于创建了一个快照并保存到立即执行函数外部，里边包含了函数内部环境和该函数使用的外部变量<code>count</code>，这样通过闭包就能用<code>countUp</code>函数控制<code>count</code>值。你可以看到，利用闭包可以在函数外部控制函数内部的值。所以，利用闭包的<strong>核心</strong>是<strong>将函数和环境保存到外部变量</strong>。</p><p>我们都知道，当函数执行完毕，执行上下文离开作用域（这里指函数作用域），作用域会被立即销毁，按照常理来说代码不可能运行起来。但是因为返回了一个闭包，这之后闭包为<code>countUp</code>函数提供环境，这就是为什么上面的例子中立即执行函数执行完之后，通过<code>countUp</code>访问到的<code>count</code>是之前的状态。</p><p>所以，在使用闭包的时候你需要清楚的一点是，闭包会造成内存泄漏，如果你返回了一个函数作为闭包，只要返回的函数存在，这个闭包就一直存在，会占用内存。</p><h1 id="说点其他的"><a href="#说点其他的" class="headerlink" title="说点其他的"></a>说点其他的</h1><p>这里我们利用《Understanding ECMAScript 6》块级绑定中的一个例子</p><h2 id="典型错误"><a href="#典型错误" class="headerlink" title="典型错误"></a>典型错误</h2><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funcs = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  funcs.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">funcs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">func</span>) </span>&#123;</span><br><span class="line">  func(); <span class="comment">// 输出 10 共10次</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在第 3 行，<code>console.log()</code>使用了变量<code>i</code>，它的闭包中除了本身，还应该保存有变量<code>i</code>，这个闭包被保存到了<code>funcs[i]</code>，但你要注意到，变量<code>i</code>是用<code>var</code>声明的，它在函数作用域中，<code>i</code>存在的作用域只有 window 一个，在循环中虽然产生了 10 个闭包，但他们都保存着同一个<code>i</code>，当循环执行完，<code>i = 10</code>，所以最后从闭包中取到的<code>i</code>也全都是 10。</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>上面提到了，因为变量<code>i</code>存在的作用域只有一个，而一个作用域中只能有一个<code>i</code>，要使<code>i</code>值不一样，就需要创建不同的作用域，解决方法有两个。</p><h3 id="方法一：使用块级作用域"><a href="#方法一：使用块级作用域" class="headerlink" title="方法一：使用块级作用域"></a>方法一：使用块级作用域</h3><p>只需要把<code>var</code>声明改为<code>let</code>声明即可</p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funcs = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  funcs.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">funcs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">func</span>) </span>&#123;</span><br><span class="line">  func(); <span class="comment">// 输出 0，1，2 ... 9</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在 for 循环初始化的时候使用进行 let 声明,这时变量的作用域是局部块作用域，每进入一次循环都会重新创建一个<code>i</code>变量。所以每次循环产生的闭包中的<code>i</code>都来自不同的作用域，而且每个作用域中的<code>i</code>都是随循环变化的，最终达成目的输出 0~9。</p><p>这时候不妨回去检验一下（已经头晕请跳过）<br>我们将<code>i</code>变量和<code>funcs</code>变量放在同级作用域下，代码如下：</p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funcs = [];</span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  funcs.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">funcs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">func</span>) </span>&#123;</span><br><span class="line">  func(); <span class="comment">// 输出 10 共10次</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我不是故意把你弄晕的，这样就能再次证明导致 bug 的根本原因是 10 个闭包使用同一个作用域的变量。</p><h3 id="方法二：创建函数作用域"><a href="#方法二：创建函数作用域" class="headerlink" title="方法二：创建函数作用域"></a>方法二：创建函数作用域</h3><p>这种方法的思路是创建函数内部的<code>i</code>变量，根据作用域链规则，当函数内部存在<code>i</code>变量时，就会屏蔽掉上层的<code>i</code>变量，通过函数返回闭包，这样闭包内的<code>i</code>变量就来自于函数，而不是函数上层的<code>i</code>变量。每个函数都会生成独一无二的作用域，根据上面的结论，同样能解决问题。</p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funcs = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  funcs.push(</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;)(i)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">funcs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">func</span>) </span>&#123;</span><br><span class="line">  func(); <span class="comment">// 输出 0，1，2 ... 9</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><article class="message message-immersive is-warning"><div class="message-body"><i class="fas fa-exclamation-triangle mr-2"></i>本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</div></article>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚看到了 Rust 语言中利用闭包实现匿名函数，想着博客许久没更新了，那就写一篇帮助大家理解吧。闭包是 JavaScript 的一个特点，搜索引擎搜索&lt;code&gt;闭包&lt;/code&gt;基本都会用 JavaScript 做例子，同时闭包也是 JavaScript 初学者较难理解的一个部分。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="https://kylinlee.github.io/categories/Code/"/>
    
    
      <category term="JavaScript" scheme="https://kylinlee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>重新审视个人博客</title>
    <link href="https://kylinlee.github.io/2020/04/25/%E9%87%8D%E6%96%B0%E5%AE%A1%E8%A7%86%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://kylinlee.github.io/2020/04/25/%E9%87%8D%E6%96%B0%E5%AE%A1%E8%A7%86%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-04-25T07:47:16.000Z</published>
    <updated>2020-05-11T12:34:29.667Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>将博客迁移到 Hexo，让我在这个期间重新想想写博客这件事。</p><a id="more"></a><h1 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h1><p>还记得第一次写博客的时候根本没有想过为什么，这样做值不值得，总觉得别人有的，自己没有，感觉少了点什么。所以在 2019 年上半年开始了个人博客，最初是使用 Gridea，上手比较快，第一次提交的时间是 4 月 10 日，到现在已经一年了。<br><img src="https://i.loli.net/2020/04/25/LmPHXpQ4S5tVUof.png" alt="old-blog-repo.png"><br>既然有了，那就好好写下去吧，也没想过为什么。和 CSDN、博客园上的博客一样，起初是记录一些问题，一些学习总结。我也注意到博客的价值问题，我希望我的博客和别的博客不一样，做一些知识总结只是在网上增添重复的内容，我认为这样是没有太大意义的，我更注重原理的阐述，刚入前端的我不会太深入，但是还是坚持做原理的阐述。</p><h1 id="迁移到-Typecho"><a href="#迁移到-Typecho" class="headerlink" title="迁移到 Typecho"></a>迁移到 Typecho</h1><p>因为博客是通过 GitPage 搭建的，访问速度很慢，那时候正好弄了一台阿里云服务器，所以将博客全部迁移到了 Typecho，每一次迁移都代表着思想的转变，不只是因为访问加快速度，更因为作为一个程序员，也想打造一个自己的平台，希望有一天能形成个人品牌。除了在服务器上搭建博客，还搭建了自己的同步网盘，图床等应用。<br>因为奔着个人宣传去的，我的博客里边开始出现了更多生活的气息，甚至有了为博客加上类似于微博，QQ 空间的微型博文的想法。</p><h1 id="重新审视"><a href="#重新审视" class="headerlink" title="重新审视"></a>重新审视</h1><p>将博客迁移到 Hexo 的这段时间，我考虑了很多，对于现在的我，博客流量几乎都是自己创造的，那博客对于我的意义在于记录每天的成长，这些数据都是我的回忆。所以考虑到高额的维护成本，以及保留更原始的数据，我选择 Hexo，保持博客更新的热情。<br>选择 Github 这个平台更多是因为数据不会丢失。</p><h1 id="我们为什么要写个人博客"><a href="#我们为什么要写个人博客" class="headerlink" title="我们为什么要写个人博客"></a>我们为什么要写个人博客</h1><ul><li>时至 2020 年，大众都在用微博，用 Facebook 等自媒体，很多这种平台都被娱乐充斥着，也许自己的博客才是那唯一一片净土。</li><li>对于一些很有特色的博客，那是打造自己的圈子，打造个人品牌的一个方法。</li><li>在 IT 界博客的占比很高，但都是和编程相关的，用来记录自己遇到的问题，解决思路，做知识沉淀。</li></ul><p><strong>让博客重新起航吧！</strong></p><article class="message message-immersive is-warning"><div class="message-body"><i class="fas fa-exclamation-triangle mr-2"></i>本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</div></article>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将博客迁移到 Hexo，让我在这个期间重新想想写博客这件事。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
